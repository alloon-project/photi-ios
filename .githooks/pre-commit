#!/bin/sh

LINT="${PWD}/swiftlint"

echo "🚀  SwiftLint 시작..."
echo "🔍  lint 적용 경로: $(pwd)"
# Staging된 모든 파일 가져오기
stagingFiles=$(git diff --cached --name-only)

# Staging된 Swift 파일 가져오기
targets=$(echo "$stagingFiles" | grep -E "\.swift$")

echo "🔍  Staing 파일 목록:"
echo $stagingFiles

echo "🔍  대상 파일 목록:"
echo $targets

if [ -z "$targets" ]; then 
  printf "🏷️  SwiftLint를 검사할 파일이 없습니다. 수고하셨습니다"
  exit 0
fi

# lint rule 정의 파일
RESULT=$(echo "$targets" | xargs $LINT lint --quiet --config ${PWD}/.swiftlint.yml)
if [ "$RESULT" == '' ]; then
	printf "✨  SwiftLint 적용을 완료했습니다!! 고생하셨습니다:)\n"
  exit 0
fi
echo ""
printf "🚫 SwiftLint Failed 아래 내용을 확인해주세요:\n"
echo "$RESULT" | while IFS= read -r line; do
  FILE=$(echo "$line" | cut -d ":" -f 1)
  LINE_NO=$(echo "$line" | cut -d ":" -f 2)
  COLUMN=$(echo "$line" | cut -d ":" -f 3)
  TYPE=$(echo "$line" | awk -F ": " '{print $2}' | awk '{print $1}')
  MESSAGE=$(echo "$line" | awk -F ": " '{print $2}' | cut -d "(" -f 1)
  RULE=$(echo "$line" | awk -F "(" '{print $2}' | tr -d ")")

  if [ "$TYPE" = "warning" ]; then
    echo "🚧 [WARNING] $FILE:$LINE_NO:$COLUMN"
    echo "    📌 $MESSAGE ($RULE)"
  elif [ "$TYPE" = "error" ]; then
    echo "🚨 [ERROR] $FILE:$LINE_NO:$COLUMN"
    echo "    📌 $MESSAGE ($RULE)"
  fi
  echo ""
done
printf "\n 🚑  커밋실패!! Swiftlint rule에 맞게 코드를 변경해주세요:)\n"
exit 1