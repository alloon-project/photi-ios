#!/bin/sh

LINT="${PWD}/swiftlint"

echo "🚀  SwiftLint 시작..."
echo "🔍  lint 적용 경로: $(pwd)"
# Staging된 모든 파일 가져오기
stagingFiles=$(git diff --cached --name-only)

# Staging된 Swift 파일 가져오기
targets=$(echo "$stagingFiles" | grep -E "\.swift$")

echo "🔍  Staing 파일 목록:"
echo $stagingFiles

echo "🔍  대상 파일 목록:"
echo $targets

if [ -z "$stagingFiles" ]; then
  printf "🏷️  Staging Area swift 파일이 없습니다"
  printf "\n ✔ git add를 먼저 진행해주세요:)"
  exit 1
fi

if [ "$RESULT" == '' ]; then 
  printf "✨  SwiftLint를 돌릴 파일이 없습니다!! 고생하셨습니다:)\n"
  exit 0
fi

# lint rule 정의 파일
RESULT=$($LINT lint --quiet --config ${PWD}/.swiftlint.yml -- $targets)
if [ "$RESULT" == '' ]; then
	printf "✨  SwiftLint 적용을 완료했습니다!! 고생하셨습니다:)\n"
else
	echo ""
	printf "✔ SwiftLint Failed 아래 내용을 확인해주세요:\n"
  while read -r line; do
    FILEPATH=$(echo $line | cut -d : -f 1)
    L=$(echo $line | cut -d : -f 2)
    C=$(echo $line | cut -d : -f 3)
    TYPE=$(echo $line | cut -d : -f 4 | cut -c 2-)
    MESSAGE=$(echo $line | cut -d : -f 5 | cut -c 2-)
    DESCRIPTION=$(echo $line | cut -d : -f 6 | cut -c 2-)
    if [ $TYPE == 'warning' ]; then
      printf "\n 🚧  $TYPE\n"
      warning 타입은 오류메시지만 표시하고 커밋을 허용하고 싶다면 line 40~42 주석 해제.
      printf "    $FILEPATH:$L:$C\n"
      printf "    📌  $MESSAGE: - $DESCRIPTION\n"
      exit 0
    elif [ $TYPE == 'error' ]; then
      printf "\n 🚨  $TYPE\n"
    fi
    printf "    ✔ $FILEPATH:$L:$C\n"
    printf "    📌 $MESSAGE: - $DESCRIPTION\n"
  done <<< "$RESULT"

  printf "\n 🚑  커밋실패!! Swiftlint rule에 맞게 코드를 변경해주세요:)\n"
  exit 1
fi