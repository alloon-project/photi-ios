// swiftlint:disable all
// swift-format-ignore-file
// swiftformat:disable all
// Generated using tuist â€” https://github.com/tuist/tuist

{% if families %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set fontType %}{{param.name}}FontConvertible{% endset %}
#if os(macOS)
import AppKit.NSFont
#elseif os(iOS) || os(tvOS) || os(watchOS)
import UIKit.UIFont
#endif
#if canImport(SwiftUI)
import SwiftUI
#endif

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

// MARK: - Fonts

// swiftlint:disable identifier_name line_length type_body_length
{% macro transformPath path %}{% filter removeNewlines %}
{% if param.preservePath %}
{{path}}
{% else %}
{{path|basename}}
{% endif %}
{% endfilter %}{% endmacro %}
{{accessModifier}} enum {{param.name}}FontFamily {
	{% for family in families %}
	{{accessModifier}} enum {{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
		{% for font in family.fonts %}
		{{accessModifier}} static let {{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{fontType}}(name: "{{font.name}}", family: "{{family.name}}", path: "{% call transformPath font.path %}")
		{% endfor %}
		{{accessModifier}} static let all: [{{fontType}}] = [{% for font in family.fonts %}{{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{{ ", " if not forloop.last }}{% endfor %}]
	}
	{% endfor %}
	{{accessModifier}} static let allCustomFonts: [{{fontType}}] = [{% for family in families %}{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.all{{ ", " if not forloop.last }}{% endfor %}].flatMap { $0 }
	{{accessModifier}} static func registerAllCustomFonts() {
		allCustomFonts.forEach { $0.register() }
	}
}
// swiftlint:enable identifier_name line_length type_body_length

// MARK: - Implementation Details

{{accessModifier}} struct {{fontType}} {
	{{accessModifier}} let name: String
	{{accessModifier}} let family: String
	{{accessModifier}} let path: String
	
	{{accessModifier}} var _24: UIFont {
		guard let font = Font(font: self, size: 24) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
	{{accessModifier}} var _22: UIFont {
		guard let font = Font(font: self, size: 22) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
	{{accessModifier}} var _20: UIFont {
		guard let font = Font(font: self, size: 20) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
	{{accessModifier}} var _18: UIFont {
		guard let font = Font(font: self, size: 18) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
	{{accessModifier}} var _16: UIFont {
		guard let font = Font(font: self, size: 16) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
	{{accessModifier}} var _14: UIFont {
		guard let font = Font(font: self, size: 14) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
	{{accessModifier}} var _12: UIFont {
		guard let font = Font(font: self, size: 12) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
	{{accessModifier}} var _10: UIFont {
		guard let font = Font(font: self, size: 10) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
	{{accessModifier}} var _8: UIFont {
		guard let font = Font(font: self, size: 8) else {
			fatalError("Unable to initialize font '\(name)' (\(family))")
		}
		return font
	}
	
#if os(macOS)
	{{accessModifier}} typealias Font = NSFont
#elseif os(iOS) || os(tvOS) || os(watchOS)
	{{accessModifier}} typealias Font = UIFont
#endif
	
	{{accessModifier}} func font(size: CGFloat) -> Font {
		guard let font = Font(font: self, size: size) else {
			fatalError("Unable to initialize font '\\(name)' (\\(family))")
		}
		return font
	}
	
#if canImport(SwiftUI)
	@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
	{{accessModifier}} func swiftUIFont(size: CGFloat) -> SwiftUI.Font {
		guard let font = Font(font: self, size: size) else {
			fatalError("Unable to initialize font '\\(name)' (\\(family))")
		}
#if os(macOS)
		return SwiftUI.Font.custom(font.fontName, size: font.pointSize)
#elseif os(iOS) || os(tvOS) || os(watchOS)
		return SwiftUI.Font(font)
#endif
	}
#endif
	
	{{accessModifier}} func register() {
		// swiftlint:disable:next conditional_returns_on_newline
		guard let url = url else { return }
		CTFontManagerRegisterFontsForURL(url as CFURL, .process, nil)
	}
	
	fileprivate var url: URL? {
		// swiftlint:disable:next implicit_return
		{% if param.lookupFunction %}
		return {{param.lookupFunction}}(name, family, path)
		{% else %}
		return {{param.bundle|default:"BundleToken.bundle"}}.url(forResource: path, withExtension: nil)
		{% endif %}
	}
}

{{accessModifier}} extension {{fontType}}.Font {
	convenience init?(font: {{fontType}}, size: CGFloat) {
#if os(iOS) || os(tvOS) || os(watchOS)
		if !UIFont.fontNames(forFamilyName: font.family).contains(font.name) {
			font.register()
		}
#elseif os(macOS)
		if let url = font.url, CTFontManagerGetScopeForURL(url as CFURL) == .none {
			font.register()
		}
#endif
		
		self.init(name: font.name, size: size)
	}
}

{{accessModifier}} extension UIFont {
	{% for family in families %}
	static var heading1: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold._24
	}
	static var heading2: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold._22
	}
	static var heading3: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold._20
	}
	static var heading4: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.semiBold._18
	}
	static var body1Bold: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold._16
	}
	static var body1: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.medium._16
	}
	static var body2Bold: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold._14
	}
	static var body2: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.medium._14
	}
	static var caption1Bold: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold._12
	}
	static var caption1: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.medium._12
	}
	static var caption2Bold: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.bold._10
	}
	static var caption2: UIFont {
		{{param.name}}FontFamily.{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.medium._10
	}
	{% endfor %}
}
{% if not param.bundle and not param.lookupFunction %}

// swiftlint:disable convenience_type
private final class BundleToken {
	static let bundle: Bundle = {
		Bundle(for: BundleToken.self)
	}()
}
// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No fonts found
{% endif %}
// swiftlint:enable all
// swiftformat:enable all
